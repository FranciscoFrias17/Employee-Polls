{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cisco\\\\Desktop\\\\Employee-Polls\\\\polls\\\\src\\\\components\\\\QuestionDetail.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { connect, useDispatch } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport { handleSaveQuestionAnswer, receiveQuestionAnswer } from \"../actions/questions\";\nimport { formatDate } from \"../utils/helpers\";\nimport Nav from \"./Nav\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction QuestionDetail(_ref) {\n  _s();\n\n  let {\n    questions,\n    authedUser,\n    users\n  } = _ref;\n  const dispatch = useDispatch();\n  const {\n    question_id\n  } = useParams();\n  let question = questions.find(question => question.id === question_id);\n  let author = users[question.author];\n  let timestamp = question.timestamp;\n  console.log(question);\n  const [selectOption, setSelectOption] = useState({\n    optionOne: \"none\",\n    optionTwo: \"none\"\n  });\n  useEffect(() => {\n    if (question.optionOne.votes.includes(authedUser)) {\n      setSelectOption({\n        optionOne: \"selected\"\n      });\n    }\n\n    if (question.optionTwo.votes.includes(authedUser)) {\n      setSelectOption({\n        optionTwo: \"selected\"\n      });\n    }\n  }, [question, authedUser]);\n\n  const handleSaveQuestionAnswer = e => {\n    e.preventDefault();\n    dispatch(handleSaveQuestionAnswer(authedUser, question_id, selectOption));\n  };\n\n  const optionOneStats = () => {\n    return (question.optionOne.votes.length / (question.optionOne.votes.length + question.optionTwo.votes.length) * 100).toFixed(2);\n  };\n\n  const optionTwoStats = () => {\n    return (question.optionTwo.votes.length / (question.optionOne.votes.length + question.optionTwo.votes.length) * 100).toFixed(2);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: author.avatarURL,\n          alt: author.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: author.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n          children: [\"Asked at: \", formatDate(timestamp)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Would you rather:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-check\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: \"option\",\n              value: \"optionOne\",\n              checked: selectOption.optionOne === \"selected\",\n              onChange: e => setSelectOption({\n                optionOne: \"selected\"\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: question.optionOne.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: \"option\",\n              value: \"optionTwo\",\n              checked: selectOption.optionTwo === \"selected\",\n              onChange: e => setSelectOption({\n                optionTwo: \"selected\"\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: question.optionTwo.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn\",\n            type: \"submit\",\n            onClick: handleSaveQuestionAnswer,\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this), selectOption.optionOne === \"selected\" && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"h5\", {\n              children: [optionOneStats(), \"% of employees selected to\", \" \", question.optionOne.text]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 15\n          }, this), selectOption.optionTwo === \"selected\" && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"h5\", {\n              children: [optionTwoStats(), \"% of employees selected to\", \" \", question.optionTwo.text]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n\n_s(QuestionDetail, \"owxAB2tnFSVZvag+mxIt/d5C0X0=\", false, function () {\n  return [useDispatch, useParams];\n});\n\n_c = QuestionDetail;\n\nconst mapStateToProps = _ref2 => {\n  let {\n    authedUser,\n    users,\n    questions\n  } = _ref2;\n  return {\n    authedUser,\n    users,\n    questions: Object.keys(questions).map(key => questions[key])\n  };\n};\n\nexport default connect(mapStateToProps)(QuestionDetail);\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionDetail\");","map":{"version":3,"names":["useState","useEffect","connect","useDispatch","useParams","handleSaveQuestionAnswer","receiveQuestionAnswer","formatDate","Nav","QuestionDetail","questions","authedUser","users","dispatch","question_id","question","find","id","author","timestamp","console","log","selectOption","setSelectOption","optionOne","optionTwo","votes","includes","e","preventDefault","optionOneStats","length","toFixed","optionTwoStats","avatarURL","name","text","mapStateToProps","Object","keys","map","key"],"sources":["C:/Users/Cisco/Desktop/Employee-Polls/polls/src/components/QuestionDetail.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { connect, useDispatch } from \"react-redux\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport {\r\n  handleSaveQuestionAnswer,\r\n  receiveQuestionAnswer,\r\n} from \"../actions/questions\";\r\nimport { formatDate } from \"../utils/helpers\";\r\n\r\nimport Nav from \"./Nav\";\r\n\r\nfunction QuestionDetail({ questions, authedUser, users }) {\r\n  const dispatch = useDispatch();\r\n  const { question_id } = useParams();\r\n  let question = questions.find((question) => question.id === question_id);\r\n  let author = users[question.author];\r\n\r\n  let timestamp = question.timestamp;\r\n\r\n  console.log(question);\r\n\r\n  const [selectOption, setSelectOption] = useState({\r\n    optionOne: \"none\",\r\n    optionTwo: \"none\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (question.optionOne.votes.includes(authedUser)) {\r\n      setSelectOption({\r\n        optionOne: \"selected\",\r\n      });\r\n    }\r\n    if (question.optionTwo.votes.includes(authedUser)) {\r\n      setSelectOption({\r\n        optionTwo: \"selected\",\r\n      });\r\n    }\r\n  }, [question, authedUser]);\r\n\r\n  const handleSaveQuestionAnswer = (e) => {\r\n    e.preventDefault();\r\n    dispatch(handleSaveQuestionAnswer(authedUser, question_id, selectOption));\r\n  };\r\n\r\n  const optionOneStats = () => {\r\n    return (\r\n      (question.optionOne.votes.length /\r\n        (question.optionOne.votes.length + question.optionTwo.votes.length)) *\r\n      100\r\n    ).toFixed(2);\r\n  };\r\n\r\n  const optionTwoStats = () => {\r\n    return (\r\n      (question.optionTwo.votes.length /\r\n        (question.optionOne.votes.length + question.optionTwo.votes.length)) *\r\n      100\r\n    ).toFixed(2);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Nav />\r\n      </div>\r\n      <div className='container'>\r\n        <div>\r\n          <img src={author.avatarURL} alt={author.name} />\r\n          <h4>{author.name}</h4>\r\n          <h5>Asked at: {formatDate(timestamp)}</h5>\r\n        </div>\r\n        <form>\r\n          <div className='form-group'>\r\n            <label>Would you rather:</label>\r\n            <div className='form-check'>\r\n              <input\r\n                type='radio'\r\n                name='option'\r\n                value='optionOne'\r\n                checked={selectOption.optionOne === \"selected\"}\r\n                onChange={(e) => setSelectOption({ optionOne: \"selected\" })}\r\n              />\r\n              <label>{question.optionOne.text}</label>\r\n            </div>\r\n            <div>\r\n              <input\r\n                type='radio'\r\n                name='option'\r\n                value='optionTwo'\r\n                checked={selectOption.optionTwo === \"selected\"}\r\n                onChange={(e) => setSelectOption({ optionTwo: \"selected\" })}\r\n              />\r\n              <label>{question.optionTwo.text}</label>\r\n            </div>\r\n            <button\r\n              className='btn'\r\n              type='submit'\r\n              onClick={handleSaveQuestionAnswer}\r\n            >\r\n              Submit\r\n            </button>\r\n            {selectOption.optionOne === \"selected\" && (\r\n              <div>\r\n                <h5>\r\n                  {optionOneStats()}% of employees selected to{\" \"}\r\n                  {question.optionOne.text}\r\n                </h5>\r\n              </div>\r\n            )}\r\n            {selectOption.optionTwo === \"selected\" && (\r\n              <div>\r\n                <h5>\r\n                  {optionTwoStats()}% of employees selected to{\" \"}\r\n                  {question.optionTwo.text}\r\n                </h5>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = ({ authedUser, users, questions }) => {\r\n  return {\r\n    authedUser,\r\n    users,\r\n    questions: Object.keys(questions).map((key) => questions[key]),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(QuestionDetail);\r\n"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,OAAT,EAAkBC,WAAlB,QAAqC,aAArC;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SACEC,wBADF,EAEEC,qBAFF,QAGO,sBAHP;AAIA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,OAAOC,GAAP,MAAgB,OAAhB;;;AAEA,SAASC,cAAT,OAA0D;EAAA;;EAAA,IAAlC;IAAEC,SAAF;IAAaC,UAAb;IAAyBC;EAAzB,CAAkC;EACxD,MAAMC,QAAQ,GAAGV,WAAW,EAA5B;EACA,MAAM;IAAEW;EAAF,IAAkBV,SAAS,EAAjC;EACA,IAAIW,QAAQ,GAAGL,SAAS,CAACM,IAAV,CAAgBD,QAAD,IAAcA,QAAQ,CAACE,EAAT,KAAgBH,WAA7C,CAAf;EACA,IAAII,MAAM,GAAGN,KAAK,CAACG,QAAQ,CAACG,MAAV,CAAlB;EAEA,IAAIC,SAAS,GAAGJ,QAAQ,CAACI,SAAzB;EAEAC,OAAO,CAACC,GAAR,CAAYN,QAAZ;EAEA,MAAM,CAACO,YAAD,EAAeC,eAAf,IAAkCvB,QAAQ,CAAC;IAC/CwB,SAAS,EAAE,MADoC;IAE/CC,SAAS,EAAE;EAFoC,CAAD,CAAhD;EAKAxB,SAAS,CAAC,MAAM;IACd,IAAIc,QAAQ,CAACS,SAAT,CAAmBE,KAAnB,CAAyBC,QAAzB,CAAkChB,UAAlC,CAAJ,EAAmD;MACjDY,eAAe,CAAC;QACdC,SAAS,EAAE;MADG,CAAD,CAAf;IAGD;;IACD,IAAIT,QAAQ,CAACU,SAAT,CAAmBC,KAAnB,CAAyBC,QAAzB,CAAkChB,UAAlC,CAAJ,EAAmD;MACjDY,eAAe,CAAC;QACdE,SAAS,EAAE;MADG,CAAD,CAAf;IAGD;EACF,CAXQ,EAWN,CAACV,QAAD,EAAWJ,UAAX,CAXM,CAAT;;EAaA,MAAMN,wBAAwB,GAAIuB,CAAD,IAAO;IACtCA,CAAC,CAACC,cAAF;IACAhB,QAAQ,CAACR,wBAAwB,CAACM,UAAD,EAAaG,WAAb,EAA0BQ,YAA1B,CAAzB,CAAR;EACD,CAHD;;EAKA,MAAMQ,cAAc,GAAG,MAAM;IAC3B,OAAO,CACJf,QAAQ,CAACS,SAAT,CAAmBE,KAAnB,CAAyBK,MAAzB,IACEhB,QAAQ,CAACS,SAAT,CAAmBE,KAAnB,CAAyBK,MAAzB,GAAkChB,QAAQ,CAACU,SAAT,CAAmBC,KAAnB,CAAyBK,MAD7D,CAAD,GAEA,GAHK,EAILC,OAJK,CAIG,CAJH,CAAP;EAKD,CAND;;EAQA,MAAMC,cAAc,GAAG,MAAM;IAC3B,OAAO,CACJlB,QAAQ,CAACU,SAAT,CAAmBC,KAAnB,CAAyBK,MAAzB,IACEhB,QAAQ,CAACS,SAAT,CAAmBE,KAAnB,CAAyBK,MAAzB,GAAkChB,QAAQ,CAACU,SAAT,CAAmBC,KAAnB,CAAyBK,MAD7D,CAAD,GAEA,GAHK,EAILC,OAJK,CAIG,CAJH,CAAP;EAKD,CAND;;EAQA,oBACE;IAAA,wBACE;MAAA,uBACE,QAAC,GAAD;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QADF,eAIE;MAAK,SAAS,EAAC,WAAf;MAAA,wBACE;QAAA,wBACE;UAAK,GAAG,EAAEd,MAAM,CAACgB,SAAjB;UAA4B,GAAG,EAAEhB,MAAM,CAACiB;QAAxC;UAAA;UAAA;UAAA;QAAA,QADF,eAEE;UAAA,UAAKjB,MAAM,CAACiB;QAAZ;UAAA;UAAA;UAAA;QAAA,QAFF,eAGE;UAAA,yBAAe5B,UAAU,CAACY,SAAD,CAAzB;QAAA;UAAA;UAAA;UAAA;QAAA,QAHF;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAME;QAAA,uBACE;UAAK,SAAS,EAAC,YAAf;UAAA,wBACE;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QADF,eAEE;YAAK,SAAS,EAAC,YAAf;YAAA,wBACE;cACE,IAAI,EAAC,OADP;cAEE,IAAI,EAAC,QAFP;cAGE,KAAK,EAAC,WAHR;cAIE,OAAO,EAAEG,YAAY,CAACE,SAAb,KAA2B,UAJtC;cAKE,QAAQ,EAAGI,CAAD,IAAOL,eAAe,CAAC;gBAAEC,SAAS,EAAE;cAAb,CAAD;YALlC;cAAA;cAAA;cAAA;YAAA,QADF,eAQE;cAAA,UAAQT,QAAQ,CAACS,SAAT,CAAmBY;YAA3B;cAAA;cAAA;cAAA;YAAA,QARF;UAAA;YAAA;YAAA;YAAA;UAAA,QAFF,eAYE;YAAA,wBACE;cACE,IAAI,EAAC,OADP;cAEE,IAAI,EAAC,QAFP;cAGE,KAAK,EAAC,WAHR;cAIE,OAAO,EAAEd,YAAY,CAACG,SAAb,KAA2B,UAJtC;cAKE,QAAQ,EAAGG,CAAD,IAAOL,eAAe,CAAC;gBAAEE,SAAS,EAAE;cAAb,CAAD;YALlC;cAAA;cAAA;cAAA;YAAA,QADF,eAQE;cAAA,UAAQV,QAAQ,CAACU,SAAT,CAAmBW;YAA3B;cAAA;cAAA;cAAA;YAAA,QARF;UAAA;YAAA;YAAA;YAAA;UAAA,QAZF,eAsBE;YACE,SAAS,EAAC,KADZ;YAEE,IAAI,EAAC,QAFP;YAGE,OAAO,EAAE/B,wBAHX;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAtBF,EA6BGiB,YAAY,CAACE,SAAb,KAA2B,UAA3B,iBACC;YAAA,uBACE;cAAA,WACGM,cAAc,EADjB,gCAC+C,GAD/C,EAEGf,QAAQ,CAACS,SAAT,CAAmBY,IAFtB;YAAA;cAAA;cAAA;cAAA;YAAA;UADF;YAAA;YAAA;YAAA;UAAA,QA9BJ,EAqCGd,YAAY,CAACG,SAAb,KAA2B,UAA3B,iBACC;YAAA,uBACE;cAAA,WACGQ,cAAc,EADjB,gCAC+C,GAD/C,EAEGlB,QAAQ,CAACU,SAAT,CAAmBW,IAFtB;YAAA;cAAA;cAAA;cAAA;YAAA;UADF;YAAA;YAAA;YAAA;UAAA,QAtCJ;QAAA;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA,QANF;IAAA;MAAA;MAAA;MAAA;IAAA,QAJF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AA8DD;;GA/GQ3B,c;UACUN,W,EACOC,S;;;KAFjBK,c;;AAiHT,MAAM4B,eAAe,GAAG,SAAsC;EAAA,IAArC;IAAE1B,UAAF;IAAcC,KAAd;IAAqBF;EAArB,CAAqC;EAC5D,OAAO;IACLC,UADK;IAELC,KAFK;IAGLF,SAAS,EAAE4B,MAAM,CAACC,IAAP,CAAY7B,SAAZ,EAAuB8B,GAAvB,CAA4BC,GAAD,IAAS/B,SAAS,CAAC+B,GAAD,CAA7C;EAHN,CAAP;AAKD,CAND;;AAQA,eAAevC,OAAO,CAACmC,eAAD,CAAP,CAAyB5B,cAAzB,CAAf"},"metadata":{},"sourceType":"module"}