{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cisco\\\\Desktop\\\\Employee-Polls\\\\polls\\\\src\\\\components\\\\QuestionDetail.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { connect, useDispatch } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport { handleSaveQuestionAnswer } from \"../actions/questions\";\nimport { formatDate } from \"../utils/helpers\";\nimport Nav from \"./Nav\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction QuestionDetail(_ref) {\n  _s();\n\n  let {\n    questions,\n    authedUser,\n    users\n  } = _ref;\n  const dispatch = useDispatch();\n  const {\n    question_id\n  } = useParams();\n  let question = questions.find(question => question.id === question_id);\n  let author = users[question.author];\n  let timestamp = question.timestamp;\n  const [selectOption, setSelectOption] = useState({\n    optionOne: \"\",\n    optionTwo: \"\"\n  });\n  console.log(question.optionOne.votes.includes(authedUser));\n\n  const optionOneStats = () => {\n    return (question.optionOne.votes.length / (question.optionOne.votes.length + question.optionTwo.votes.length) * 100).toFixed(2);\n  };\n\n  const optionTwoStats = () => {\n    return (question.optionTwo.votes.length / (question.optionOne.votes.length + question.optionTwo.votes.length) * 100).toFixed(2);\n  };\n\n  const selectedOption = {\n    authedUser: authedUser,\n    qid: question_id,\n    answer: selectOption.optionOne === \"selected\" ? \"optionOne\" : \"optionTwo\"\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch(handleSaveQuestionAnswer(selectedOption));\n  };\n\n  const disabled = selectOption.optionOne === \"\" || selectOption.optionTwo === \"\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: author.avatarURL,\n          alt: author.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: author.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n          children: [\"Asked at: \", formatDate(timestamp)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Would you rather:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-check\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: \"option\",\n              value: \"optionOne\",\n              checked: selectOption.optionOne.votes === \"selected\",\n              onChange: e => setSelectOption({\n                optionOne: \"selected\"\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: question.optionOne.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: \"option\",\n              value: \"optionTwo\",\n              checked: selectOption.optionTwo.votes === \"selected\",\n              onChange: e => setSelectOption({\n                optionTwo: \"selected\"\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: question.optionTwo.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn\",\n            type: \"submit\",\n            disabled: disabled,\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this), selectOption.optionOne === \"selected\" && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"h5\", {\n              children: [optionOneStats(), \"% of employees selected to\", \" \", question.optionOne.text]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }, this), selectOption.optionTwo === \"selected\" && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"h5\", {\n              children: [optionTwoStats(), \"% of employees selected to\", \" \", question.optionTwo.text]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n\n_s(QuestionDetail, \"xClwH/CzvMbob8roYgUpOqHD6q0=\", false, function () {\n  return [useDispatch, useParams];\n});\n\n_c = QuestionDetail;\n\nconst mapStateToProps = _ref2 => {\n  let {\n    authedUser,\n    users,\n    questions\n  } = _ref2;\n  return {\n    authedUser,\n    users,\n    questions: Object.keys(questions).map(key => questions[key])\n  };\n};\n\nexport default connect(mapStateToProps)(QuestionDetail);\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionDetail\");","map":{"version":3,"names":["useState","connect","useDispatch","useParams","handleSaveQuestionAnswer","formatDate","Nav","QuestionDetail","questions","authedUser","users","dispatch","question_id","question","find","id","author","timestamp","selectOption","setSelectOption","optionOne","optionTwo","console","log","votes","includes","optionOneStats","length","toFixed","optionTwoStats","selectedOption","qid","answer","handleSubmit","e","preventDefault","disabled","avatarURL","name","text","mapStateToProps","Object","keys","map","key"],"sources":["C:/Users/Cisco/Desktop/Employee-Polls/polls/src/components/QuestionDetail.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport { connect, useDispatch } from \"react-redux\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { handleSaveQuestionAnswer } from \"../actions/questions\";\r\nimport { formatDate } from \"../utils/helpers\";\r\nimport Nav from \"./Nav\";\r\n\r\nfunction QuestionDetail({ questions, authedUser, users }) {\r\n  const dispatch = useDispatch();\r\n  const { question_id } = useParams();\r\n  let question = questions.find((question) => question.id === question_id);\r\n  let author = users[question.author];\r\n  let timestamp = question.timestamp;\r\n\r\n  const [selectOption, setSelectOption] = useState({\r\n    optionOne: \"\",\r\n    optionTwo: \"\",\r\n  });\r\n\r\n  console.log(question.optionOne.votes.includes(authedUser));\r\n\r\n  const optionOneStats = () => {\r\n    return (\r\n      (question.optionOne.votes.length /\r\n        (question.optionOne.votes.length + question.optionTwo.votes.length)) *\r\n      100\r\n    ).toFixed(2);\r\n  };\r\n\r\n  const optionTwoStats = () => {\r\n    return (\r\n      (question.optionTwo.votes.length /\r\n        (question.optionOne.votes.length + question.optionTwo.votes.length)) *\r\n      100\r\n    ).toFixed(2);\r\n  };\r\n\r\n  const selectedOption = {\r\n    authedUser: authedUser,\r\n    qid: question_id,\r\n    answer: selectOption.optionOne === \"selected\" ? \"optionOne\" : \"optionTwo\",\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    dispatch(handleSaveQuestionAnswer(selectedOption));\r\n  };\r\n\r\n  const disabled =\r\n    selectOption.optionOne === \"\" || selectOption.optionTwo === \"\";\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Nav />\r\n      </div>\r\n      <div className='container'>\r\n        <div>\r\n          <img src={author.avatarURL} alt={author.name} />\r\n          <h4>{author.name}</h4>\r\n          <h5>Asked at: {formatDate(timestamp)}</h5>\r\n        </div>\r\n        <form onSubmit={handleSubmit}>\r\n          <div className='form-group'>\r\n            <label>Would you rather:</label>\r\n            <div className='form-check'>\r\n              <input\r\n                type='radio'\r\n                name='option'\r\n                value='optionOne'\r\n                checked={selectOption.optionOne.votes === \"selected\"}\r\n                onChange={(e) => setSelectOption({ optionOne: \"selected\" })}\r\n              />\r\n              <label>{question.optionOne.text}</label>\r\n            </div>\r\n            <div>\r\n              <input\r\n                type='radio'\r\n                name='option'\r\n                value='optionTwo'\r\n                checked={selectOption.optionTwo.votes === \"selected\"}\r\n                onChange={(e) => setSelectOption({ optionTwo: \"selected\" })}\r\n              />\r\n              <label>{question.optionTwo.text}</label>\r\n            </div>\r\n            <button className='btn' type='submit' disabled={disabled}>\r\n              Submit\r\n            </button>\r\n            {selectOption.optionOne === \"selected\" && (\r\n              <div>\r\n                <h5>\r\n                  {optionOneStats()}% of employees selected to{\" \"}\r\n                  {question.optionOne.text}\r\n                </h5>\r\n              </div>\r\n            )}\r\n            {selectOption.optionTwo === \"selected\" && (\r\n              <div>\r\n                <h5>\r\n                  {optionTwoStats()}% of employees selected to{\" \"}\r\n                  {question.optionTwo.text}\r\n                </h5>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = ({ authedUser, users, questions }) => {\r\n  return {\r\n    authedUser,\r\n    users,\r\n    questions: Object.keys(questions).map((key) => questions[key]),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(QuestionDetail);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}